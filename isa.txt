

 here is another isa file
 it defines the isa
 who would have guessed
 
 ma = memory address, can be X or a constant
 mv = value can be X or a constant
 A = Accumulator
 X = Index Register
 R = Return Address
 C = constant
 
 Format
 --------------------
 PRIMARY MNEMONIC
 <OPCODE> <ARGUMENTS>
 
 Description
 
 Microcode
 
 --------------------
 NOP
   NOP: 0x00
 
 Does nothing
 
 microcode
 
 --------------------
 TAX
   TAX: 0x??
 
 Copies A to X
 
 microcode
 
 --------------------
 TXA
   TXA: 0x??
 
 Copies X to A
 Alias of LDA X
 
 --------------------
 STA
   STA [C]: 0x?? const
   STA [X]: 0x??
 
 Copies A to memory at the given address
 
 --------------------
 STX
   STX [C]: 0x?? const
   STX [X]: 0x??
 
 Copies X to memory at the given address
 
 --------------------
 STR
   STR [C]: 0x?? const
   STR [X]: 0x??
 
 Copies R to memory at the given address
 
 --------------------
 LDA
   LDA C:   0x?? const
   LDA X:   0x??
   LDA [C]: 0x?? const
   LDA [X]: 0x??
 
 Copies the given value to A
 
 --------------------
 LDX
   LDX C:   0x?? const
   LDX X:   0x??
   LDX [C]: 0x?? const
   LDX [X]: 0x??
 
 Copies the given value to X
 
 --------------------
 LDR
   LDR [C]: 0x?? const
   LDR [X]: 0x??
 
 Copies the given value to R
 
 --------------------
 ADD
   ADD A, C:   0x?? const
   ADD A, X:   0x??
   ADD A, [C]: 0x?? const
   ADD A, [X]: 0x??
   ADD X, C:   0x?? const
   ADD X, X:   0x??
   ADD [C], A: 0x?? const
   ADD [X], A: 0x??
 
 Adds the second argument to the first, storing it in the first
 Includes the carry flag
 
 --------------------
 SUB
   SUB A, C:   0x?? const
   SUB A, X:   0x??
   SUB A, [C]: 0x?? const
   SUB A, [X]: 0x??
   SUB X, C:   0x?? const
   SUB X, X:   0x??
   SUB [C], A: 0x?? const
   SUB [X], A: 0x??
 
 Subtracts the second argument from the first, storing it in the first
 Includes the carry flag
 
 --------------------
 INC
   INC: 0x??
   INX: 0x??
 
 Increments the A or X register
 
 --------------------
 DEC
   DEC: 0x??
   DEX: 0x??
 
 Decrements the A or X register
 
 --------------------
 JMP
   JMP C: 0x?? const
   JMP X: 0x??
 
 Jumps to the given address
 
 --------------------
 Jcc
   JC C:  0x?? const
   JC X:  0x??
   JNC C: 0x?? const
   JNC X: 0x??
   JE C:  0x?? const
   JE X:  0x??
   JNE C: 0x?? const
   JNE X: 0x??
   JZ C:  0x?? const
   JZ X:  0x??
   JNZ C: 0x?? const
   JNZ X: 0x??
   JG C:  0x?? const
   JG X:  0x??
   JGE C: 0x?? const
   JGE X: 0x??
   JL C:  0x?? const
   JL X:  0x??
   JLE C: 0x?? const
   JLE X: 0x??
 
 Jumps to the given value if the given condition is true
 
 --------------------
 CMP
   CMP C: 0x?? const
   CMP X: 0x??
   CMX C: 0x?? const
   CMX X: 0x??
 
 Compares A or X with a constant or X by subtracting
 the former from the latter without storing the result
 
 --------------------
 CLC
   CLC: 0x??
 
 Clears carry, sign, and overflow flags
 Sets zero flag
 Alias for CMX X
 
 --------------------
 JSR
   JSR C: 0x?? const
   JSR X: 0x??
 
 Jumps to subroutine at the given address
 Sets R to the address of the next instruction
 
 --------------------
 RET
   RET: 0x??
 
 Return from subroutine
 Jumps to the address held in R











